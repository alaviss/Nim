trigger:
  branches:
    include:
    - '*'
pr:
  branches:
    include:
    - '*'

jobs:
- job: packages

  timeoutInMinutes: 90 # default `60` led to lots of cancelled jobs; use 0 for unlimited (may be undesirable)

  strategy:
    matrix:
      Linux_amd64:
        vmImage: 'ubuntu-16.04'
        containerImage: ''
        CPU: amd64
      Linux_i386:
        vmImage: 'ubuntu-latest'
        containerImage: ghcr.io/alaviss/nim-ci:sha-6acc665@sha256:6929d3b931ec12b78dae8e8cb7bdc8431bbedb4ae699de5a887e29c21e32475d
        CPU: i386
      OSX_amd64:
        vmImage: 'macOS-10.15'
        containerImage: ''
        CPU: amd64
      OSX_amd64_cpp:
        vmImage: 'macOS-10.15'
        containerImage: ''
        CPU: amd64
        NIM_COMPILE_TO_CPP: true
      Windows_amd64_batch0_3:
        vmImage: 'windows-2019'
        containerImage: ''
        CPU: amd64
        # see also: `NIM_TEST_PACKAGES`
        NIM_TESTAMENT_BATCH: "0_3"
      Windows_amd64_batch1_3:
        vmImage: 'windows-2019'
        containerImage: ''
        CPU: amd64
        NIM_TESTAMENT_BATCH: "1_3"
      Windows_amd64_batch2_3:
        vmImage: 'windows-2019'
        containerImage: ''
        CPU: amd64
        NIM_TESTAMENT_BATCH: "2_3"

  pool:
    vmImage: $(vmImage)

  ${{ if ne(variables.containerImage, '') }}:
    container: ${{ variables.containerImage }}

  workspace:
    clean: all

  steps:
    - bash: git config --global core.autocrlf false
      displayName: 'Disable auto conversion to CRLF by git (Windows-only)'
      condition: eq(variables['Agent.OS'], 'Windows_NT')

    - checkout: self
      fetchDepth: 1

    - bash: git clone --depth 1 https://github.com/nim-lang/csources
      displayName: 'Checkout Nim csources'

    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install node.js 12.x'

    - bash: |
        set -e
        . ci/funs.sh
        echo_run sudo apt-fast update -qq
        DEBIAN_FRONTEND='noninteractive' \
          echo_run sudo apt-fast install --no-install-recommends -yq \
            libcurl4-openssl-dev libgc-dev libsdl1.2-dev libsfml-dev valgrind libc6-dbg
      displayName: 'Install dependencies (amd64 Linux)'
      condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['CPU'], 'amd64'))

    - bash: brew install boehmgc make sfml
      displayName: 'Install dependencies (OSX)'
      condition: eq(variables['Agent.OS'], 'Darwin')

    - bash: |
        set -e
        . ci/funs.sh
        echo_run mkdir dist
        echo_run curl -L https://nim-lang.org/download/mingw64.7z -o dist/mingw64.7z
        echo_run curl -L https://nim-lang.org/download/dlls.zip -o dist/dlls.zip
        echo_run 7z x dist/mingw64.7z -odist
        echo_run 7z x dist/dlls.zip -obin
        echo_run echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)/dist/mingw64/bin'

      displayName: 'Install dependencies (Windows)'
      condition: eq(variables['Agent.OS'], 'Windows_NT')

    - bash: echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)/bin'
      displayName: 'Add build binaries to PATH'

    - bash: |
        set -e
        . ci/funs.sh
        echo_run echo 'PATH:' "$PATH"
        echo_run echo '##[section]gcc version'
        echo_run gcc -v
        echo_run echo '##[section]nodejs version'
        echo_run node -v
        echo_run echo '##[section]make version'
        echo_run make -v
      displayName: 'System information'

    - bash: echo '##vso[task.setvariable variable=csources_version]'"$(git -C csources rev-parse HEAD)"
      displayName: 'Get csources version'

    - task: Cache@2
      inputs:
        key: <
          csources | "$(Agent.OS)" | "${{ coalesce(variables.containerImage, 'none') }}" | $(CPU) | $(csources_version)
        path: csources/bin
      displayName: 'Restore built csources'

    - bash: |
        set -e
        . ci/funs.sh
        ncpu=
        ext=
        case '$(Agent.OS)' in
        'Linux')
          ncpu=$(nproc)
          ;;
        'Darwin')
          ncpu=$(sysctl -n hw.ncpu)
          ;;
        'Windows_NT')
          ncpu=$NUMBER_OF_PROCESSORS
          ext=.exe
          ;;
        esac
        [[ -z "$ncpu" || $ncpu -le 0 ]] && ncpu=1

        if [[ -x csources/bin/nim$ext ]]; then
          echo_run echo "Found cached compiler, skipping build"
        else
          echo_run make -C csources -j $ncpu CC=gcc ucpu=$(CPU) koch=no
        fi

        echo_run cp csources/bin/nim$ext bin
      displayName: 'Build 1-stage compiler from csources'

    - bash: nim c koch
      displayName: 'Build koch'

      # set result to omit the "bash exited with error code '1'" message
    - bash: ./koch runCI || echo '##vso[task.complete result=Failed]'
      displayName: 'Run CI'
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
